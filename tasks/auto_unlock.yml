---
- name: Setting inbuilt key variables
  ansible.builtin.set_fact:
    server_security_auto_unlock_script_path: "/usr/local/bin/luks-unlock.sh"
    server_security_auto_unlock_unlocked_drive_mount_point: "/mnt/{{ auto_unlock_encrypted_drive_identifier }}"
    server_security_gcp_credentials_dir: "/opt/gcp-credentials/{{ inventory_hostname }}"

- name: Ensure mount point exists
  become: true
  ansible.builtin.file:
    path: "{{ server_security_auto_unlock_unlocked_drive_mount_point }}"
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0700'

- name: Ensure /usr/local/bin exists
  become: true
  ansible.builtin.file:
    path: /usr/local/bin
    state: directory
    mode: '0755'

- name: Install Google Cloud SDK
  become: true
  block:
    - name: Download Google Cloud SDK GPG key
      ansible.builtin.get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /tmp/google-cloud-sdk.gpg
        mode: '0644'

    - name: Add Google Cloud SDK GPG key to keyring
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/google-cloud-sdk.gpg > /usr/share/keyrings/cloud.google.gpg
        chmod 644 /usr/share/keyrings/cloud.google.gpg
      args:
        creates: /usr/share/keyrings/cloud.google.gpg

    - name: Add Google Cloud SDK repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main"
        state: present

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true

    - name: Install Google Cloud SDK
      ansible.builtin.apt:
        name: google-cloud-cli
        state: present

- name: Create GCP credentials directory
  become: true
  ansible.builtin.file:
    path: "{{ server_security_gcp_credentials_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Copy service account key file
  become: true
  ansible.builtin.copy:
    src: "{{ server_security_gcp_service_account_key_file }}"
    dest: "{{ server_security_gcp_credentials_dir }}/luks-key-{{ inventory_hostname }}.json"
    owner: root
    group: root
    mode: '0600'
  when: server_security_gcp_service_account_key_file is defined and server_security_gcp_service_account_key_file | length > 0
  ignore_errors: true
  register: server_security_key_copy_result

- name: Warning when service account key not found
  ansible.builtin.debug:
    msg: "WARNING: Service account key file not found or not copied. LUKS unlock will not work until key is provided."
  when: server_security_key_copy_result is failed or server_security_gcp_service_account_key_file is not defined

- name: Copy the LUKS unlock script
  become: true
  ansible.builtin.template:
    src: auto_unlock/luks-unlock.sh.j2
    dest: "{{ server_security_auto_unlock_script_path }}"
    owner: root
    group: root
    mode: '0755'

- name: Create the systemd service
  become: true
  ansible.builtin.template:
    src: auto_unlock/run-unlock-on-startup.service.j2
    dest: "/etc/systemd/system/run-unlock-on-startup-{{ auto_unlock_encrypted_drive_identifier }}.service"
    owner: root
    group: root
    mode: '0644'

- name: Reload systemd configuration
  become: true
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable and start the systemd service
  become: true
  ansible.builtin.systemd:
    name: "run-unlock-on-startup-{{ auto_unlock_encrypted_drive_identifier }}.service"
    enabled: true
    state: started

# Optional: Verification tasks (Updated)
- name: Verify GCP authentication setup
  become: true
  block:
    - name: Test gcloud authentication
      ansible.builtin.shell: |
        gcloud auth activate-service-account \
          --key-file="{{ server_security_gcp_credentials_dir }}/luks-key-{{ inventory_hostname }}.json" \
          --quiet
        gcloud secrets versions access latest --secret="{{ auto_unlock_secret_name }}" --project="{{ server_security_gcp_project_id }}" > /dev/null
      args:
        executable: /bin/bash
      register: server_security_gcp_auth_test
      changed_when: false
      failed_when: server_security_gcp_auth_test.rc != 0

    - name: Display authentication test result
      ansible.builtin.debug:
        msg: "GCP authentication test successful for {{ inventory_hostname }}"
      when: server_security_gcp_auth_test.rc == 0

  rescue:
    - name: Display authentication failure
      ansible.builtin.debug:
        msg: "Warning: GCP authentication test failed. Check service account key and permissions."
