#!/bin/bash
# {{ ansible_managed }}

# Node-aware LUKS unlock script using Google Secret Manager
# Generated by Ansible for {{ inventory_hostname }}
# All values are baked in at deployment time

if [ "$#" -ne 4 ]; then
    echo "Usage: $0 SECRET_NAME DEVICE_PATH MOUNT_PATH CRYPT_COUNTER"
    echo "Example: $0 luks-key-node2-data1 /dev/sdb1 /mnt/data1 1"
    exit 1
fi

NODE_SECRET_NAME=$1
DEVICE_PATH=$2
MOUNT_PATH=$3
CRYPT_COUNTER=$4

# Baked-in values from Ansible template
GOOGLE_CLOUD_PROJECT="{{ gcp_project_id }}"
GOOGLE_APPLICATION_CREDENTIALS="{{ server_security_gcp_credentials_dir }}/luks-key-{{ inventory_hostname }}.json"
NODE_NAME="{{ inventory_hostname }}"

MAPPER_PATH="/dev/mapper/dm-${CRYPT_COUNTER}"

# Verify gcloud is available
if ! command -v gcloud >/dev/null 2>&1; then
    echo "‚ùå Error: gcloud not found in PATH"
    exit 1
fi

echo "üîì Unlocking LUKS device for node: $NODE_NAME"
echo "Using secret: $SECRET_NAME"
echo "Device: $DEVICE_PATH ‚Üí $MOUNT_PATH"

# Verify credentials file exists
if [ ! -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
    echo "‚ùå Error: Credentials file not found: $GOOGLE_APPLICATION_CREDENTIALS"
    exit 1
fi

# Authenticate with service account
echo "üîë Authenticating with service account..."
gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS" --quiet

if [ $? -ne 0 ]; then
    echo "‚ùå Failed to authenticate with service account"
    exit 1
fi

# Retrieve the encryption key
echo "üì• Retrieving encryption key for $NODE_NAME..."
LUKS_KEY=$(gcloud secrets versions access latest --secret="$NODE_SECRET_NAME" --project="$GOOGLE_CLOUD_PROJECT" 2>/dev/null)

if [ -z "$LUKS_KEY" ]; then
    echo "‚ùå Failed to retrieve secret for node $NODE_NAME"
    echo "Debug info:"
    echo "  Project: $GOOGLE_CLOUD_PROJECT"
    echo "  Secret: $NODE_SECRET_NAME"
    exit 1
fi

echo "‚úÖ Successfully retrieved encryption key"

# Unlock LUKS device if not already open
if [ ! -e "$MAPPER_PATH" ]; then
    echo "üîê Unlocking LUKS device: $DEVICE_PATH -> dm-${CRYPT_COUNTER}"
    echo -n "$LUKS_KEY" | cryptsetup luksOpen "$DEVICE_PATH" "dm-${CRYPT_COUNTER}"

    if [ $? -eq 0 ]; then
        echo "‚úÖ LUKS device unlocked successfully"
    else
        echo "‚ùå Failed to unlock LUKS device"
        unset LUKS_KEY
        exit 1
    fi
else
    echo "‚ÑπÔ∏è  LUKS device dm-${CRYPT_COUNTER} is already open"
fi

# Mount if not already mounted
if ! mountpoint -q "$MOUNT_PATH"; then
    echo "üìÅ Creating mount point and mounting encrypted device..."
    mkdir -p "$MOUNT_PATH"
    mount "$MAPPER_PATH" "$MOUNT_PATH"

    if [ $? -eq 0 ]; then
        echo "‚úÖ Device mounted at: $MOUNT_PATH"
    else
        echo "‚ùå Failed to mount device"
        unset LUKS_KEY
        exit 1
    fi
else
    echo "‚ÑπÔ∏è  Device is already mounted at: $MOUNT_PATH"
fi

# Clear sensitive data from memory
unset LUKS_KEY

echo ""
echo "üéâ SUCCESS! Node $NODE_NAME encrypted device is ready"
echo "   Device: $DEVICE_PATH"
echo "   Mapper: $MAPPER_PATH"
echo "   Mounted: $MOUNT_PATH"
